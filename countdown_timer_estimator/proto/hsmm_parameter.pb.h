// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hsmm_parameter.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hsmm_5fparameter_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hsmm_5fparameter_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hsmm_5fparameter_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hsmm_5fparameter_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hsmm_5fparameter_2eproto;
namespace cttl {
namespace hsmm {
class HSMMParameterProto;
struct HSMMParameterProtoDefaultTypeInternal;
extern HSMMParameterProtoDefaultTypeInternal _HSMMParameterProto_default_instance_;
}  // namespace hsmm
}  // namespace cttl
PROTOBUF_NAMESPACE_OPEN
template<> ::cttl::hsmm::HSMMParameterProto* Arena::CreateMaybeMessage<::cttl::hsmm::HSMMParameterProto>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace cttl {
namespace hsmm {

// ===================================================================

class HSMMParameterProto final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:cttl.hsmm.HSMMParameterProto) */ {
 public:
  inline HSMMParameterProto() : HSMMParameterProto(nullptr) {}
  ~HSMMParameterProto() override;
  explicit PROTOBUF_CONSTEXPR HSMMParameterProto(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HSMMParameterProto(const HSMMParameterProto& from);
  HSMMParameterProto(HSMMParameterProto&& from) noexcept
    : HSMMParameterProto() {
    *this = ::std::move(from);
  }

  inline HSMMParameterProto& operator=(const HSMMParameterProto& from) {
    CopyFrom(from);
    return *this;
  }
  inline HSMMParameterProto& operator=(HSMMParameterProto&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HSMMParameterProto& default_instance() {
    return *internal_default_instance();
  }
  static inline const HSMMParameterProto* internal_default_instance() {
    return reinterpret_cast<const HSMMParameterProto*>(
               &_HSMMParameterProto_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HSMMParameterProto& a, HSMMParameterProto& b) {
    a.Swap(&b);
  }
  inline void Swap(HSMMParameterProto* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HSMMParameterProto* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HSMMParameterProto* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HSMMParameterProto>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HSMMParameterProto& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const HSMMParameterProto& from) {
    HSMMParameterProto::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HSMMParameterProto* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "cttl.hsmm.HSMMParameterProto";
  }
  protected:
  explicit HSMMParameterProto(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStrFileDistributionFieldNumber = 9,
    kHzFieldNumber = 1,
    kResFieldNumber = 2,
    kDFieldNumber = 3,
    kSigmaFieldNumber = 4,
    kMaxNFieldNumber = 5,
    kNStateFieldNumber = 6,
    kAlphaFieldNumber = 8,
    kNObsFieldNumber = 7,
  };
  // string str_file_distribution = 9;
  void clear_str_file_distribution();
  const std::string& str_file_distribution() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_str_file_distribution(ArgT0&& arg0, ArgT... args);
  std::string* mutable_str_file_distribution();
  PROTOBUF_NODISCARD std::string* release_str_file_distribution();
  void set_allocated_str_file_distribution(std::string* str_file_distribution);
  private:
  const std::string& _internal_str_file_distribution() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_str_file_distribution(const std::string& value);
  std::string* _internal_mutable_str_file_distribution();
  public:

  // double hz = 1;
  void clear_hz();
  double hz() const;
  void set_hz(double value);
  private:
  double _internal_hz() const;
  void _internal_set_hz(double value);
  public:

  // double res = 2;
  void clear_res();
  double res() const;
  void set_res(double value);
  private:
  double _internal_res() const;
  void _internal_set_res(double value);
  public:

  // double d = 3;
  void clear_d();
  double d() const;
  void set_d(double value);
  private:
  double _internal_d() const;
  void _internal_set_d(double value);
  public:

  // double sigma = 4;
  void clear_sigma();
  double sigma() const;
  void set_sigma(double value);
  private:
  double _internal_sigma() const;
  void _internal_set_sigma(double value);
  public:

  // int32 max_n = 5;
  void clear_max_n();
  int32_t max_n() const;
  void set_max_n(int32_t value);
  private:
  int32_t _internal_max_n() const;
  void _internal_set_max_n(int32_t value);
  public:

  // int32 n_state = 6;
  void clear_n_state();
  int32_t n_state() const;
  void set_n_state(int32_t value);
  private:
  int32_t _internal_n_state() const;
  void _internal_set_n_state(int32_t value);
  public:

  // double alpha = 8;
  void clear_alpha();
  double alpha() const;
  void set_alpha(double value);
  private:
  double _internal_alpha() const;
  void _internal_set_alpha(double value);
  public:

  // int32 n_obs = 7;
  void clear_n_obs();
  int32_t n_obs() const;
  void set_n_obs(int32_t value);
  private:
  int32_t _internal_n_obs() const;
  void _internal_set_n_obs(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:cttl.hsmm.HSMMParameterProto)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr str_file_distribution_;
    double hz_;
    double res_;
    double d_;
    double sigma_;
    int32_t max_n_;
    int32_t n_state_;
    double alpha_;
    int32_t n_obs_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_hsmm_5fparameter_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HSMMParameterProto

// double hz = 1;
inline void HSMMParameterProto::clear_hz() {
  _impl_.hz_ = 0;
}
inline double HSMMParameterProto::_internal_hz() const {
  return _impl_.hz_;
}
inline double HSMMParameterProto::hz() const {
  // @@protoc_insertion_point(field_get:cttl.hsmm.HSMMParameterProto.hz)
  return _internal_hz();
}
inline void HSMMParameterProto::_internal_set_hz(double value) {
  
  _impl_.hz_ = value;
}
inline void HSMMParameterProto::set_hz(double value) {
  _internal_set_hz(value);
  // @@protoc_insertion_point(field_set:cttl.hsmm.HSMMParameterProto.hz)
}

// double res = 2;
inline void HSMMParameterProto::clear_res() {
  _impl_.res_ = 0;
}
inline double HSMMParameterProto::_internal_res() const {
  return _impl_.res_;
}
inline double HSMMParameterProto::res() const {
  // @@protoc_insertion_point(field_get:cttl.hsmm.HSMMParameterProto.res)
  return _internal_res();
}
inline void HSMMParameterProto::_internal_set_res(double value) {
  
  _impl_.res_ = value;
}
inline void HSMMParameterProto::set_res(double value) {
  _internal_set_res(value);
  // @@protoc_insertion_point(field_set:cttl.hsmm.HSMMParameterProto.res)
}

// double d = 3;
inline void HSMMParameterProto::clear_d() {
  _impl_.d_ = 0;
}
inline double HSMMParameterProto::_internal_d() const {
  return _impl_.d_;
}
inline double HSMMParameterProto::d() const {
  // @@protoc_insertion_point(field_get:cttl.hsmm.HSMMParameterProto.d)
  return _internal_d();
}
inline void HSMMParameterProto::_internal_set_d(double value) {
  
  _impl_.d_ = value;
}
inline void HSMMParameterProto::set_d(double value) {
  _internal_set_d(value);
  // @@protoc_insertion_point(field_set:cttl.hsmm.HSMMParameterProto.d)
}

// double sigma = 4;
inline void HSMMParameterProto::clear_sigma() {
  _impl_.sigma_ = 0;
}
inline double HSMMParameterProto::_internal_sigma() const {
  return _impl_.sigma_;
}
inline double HSMMParameterProto::sigma() const {
  // @@protoc_insertion_point(field_get:cttl.hsmm.HSMMParameterProto.sigma)
  return _internal_sigma();
}
inline void HSMMParameterProto::_internal_set_sigma(double value) {
  
  _impl_.sigma_ = value;
}
inline void HSMMParameterProto::set_sigma(double value) {
  _internal_set_sigma(value);
  // @@protoc_insertion_point(field_set:cttl.hsmm.HSMMParameterProto.sigma)
}

// int32 max_n = 5;
inline void HSMMParameterProto::clear_max_n() {
  _impl_.max_n_ = 0;
}
inline int32_t HSMMParameterProto::_internal_max_n() const {
  return _impl_.max_n_;
}
inline int32_t HSMMParameterProto::max_n() const {
  // @@protoc_insertion_point(field_get:cttl.hsmm.HSMMParameterProto.max_n)
  return _internal_max_n();
}
inline void HSMMParameterProto::_internal_set_max_n(int32_t value) {
  
  _impl_.max_n_ = value;
}
inline void HSMMParameterProto::set_max_n(int32_t value) {
  _internal_set_max_n(value);
  // @@protoc_insertion_point(field_set:cttl.hsmm.HSMMParameterProto.max_n)
}

// int32 n_state = 6;
inline void HSMMParameterProto::clear_n_state() {
  _impl_.n_state_ = 0;
}
inline int32_t HSMMParameterProto::_internal_n_state() const {
  return _impl_.n_state_;
}
inline int32_t HSMMParameterProto::n_state() const {
  // @@protoc_insertion_point(field_get:cttl.hsmm.HSMMParameterProto.n_state)
  return _internal_n_state();
}
inline void HSMMParameterProto::_internal_set_n_state(int32_t value) {
  
  _impl_.n_state_ = value;
}
inline void HSMMParameterProto::set_n_state(int32_t value) {
  _internal_set_n_state(value);
  // @@protoc_insertion_point(field_set:cttl.hsmm.HSMMParameterProto.n_state)
}

// int32 n_obs = 7;
inline void HSMMParameterProto::clear_n_obs() {
  _impl_.n_obs_ = 0;
}
inline int32_t HSMMParameterProto::_internal_n_obs() const {
  return _impl_.n_obs_;
}
inline int32_t HSMMParameterProto::n_obs() const {
  // @@protoc_insertion_point(field_get:cttl.hsmm.HSMMParameterProto.n_obs)
  return _internal_n_obs();
}
inline void HSMMParameterProto::_internal_set_n_obs(int32_t value) {
  
  _impl_.n_obs_ = value;
}
inline void HSMMParameterProto::set_n_obs(int32_t value) {
  _internal_set_n_obs(value);
  // @@protoc_insertion_point(field_set:cttl.hsmm.HSMMParameterProto.n_obs)
}

// double alpha = 8;
inline void HSMMParameterProto::clear_alpha() {
  _impl_.alpha_ = 0;
}
inline double HSMMParameterProto::_internal_alpha() const {
  return _impl_.alpha_;
}
inline double HSMMParameterProto::alpha() const {
  // @@protoc_insertion_point(field_get:cttl.hsmm.HSMMParameterProto.alpha)
  return _internal_alpha();
}
inline void HSMMParameterProto::_internal_set_alpha(double value) {
  
  _impl_.alpha_ = value;
}
inline void HSMMParameterProto::set_alpha(double value) {
  _internal_set_alpha(value);
  // @@protoc_insertion_point(field_set:cttl.hsmm.HSMMParameterProto.alpha)
}

// string str_file_distribution = 9;
inline void HSMMParameterProto::clear_str_file_distribution() {
  _impl_.str_file_distribution_.ClearToEmpty();
}
inline const std::string& HSMMParameterProto::str_file_distribution() const {
  // @@protoc_insertion_point(field_get:cttl.hsmm.HSMMParameterProto.str_file_distribution)
  return _internal_str_file_distribution();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HSMMParameterProto::set_str_file_distribution(ArgT0&& arg0, ArgT... args) {
 
 _impl_.str_file_distribution_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:cttl.hsmm.HSMMParameterProto.str_file_distribution)
}
inline std::string* HSMMParameterProto::mutable_str_file_distribution() {
  std::string* _s = _internal_mutable_str_file_distribution();
  // @@protoc_insertion_point(field_mutable:cttl.hsmm.HSMMParameterProto.str_file_distribution)
  return _s;
}
inline const std::string& HSMMParameterProto::_internal_str_file_distribution() const {
  return _impl_.str_file_distribution_.Get();
}
inline void HSMMParameterProto::_internal_set_str_file_distribution(const std::string& value) {
  
  _impl_.str_file_distribution_.Set(value, GetArenaForAllocation());
}
inline std::string* HSMMParameterProto::_internal_mutable_str_file_distribution() {
  
  return _impl_.str_file_distribution_.Mutable(GetArenaForAllocation());
}
inline std::string* HSMMParameterProto::release_str_file_distribution() {
  // @@protoc_insertion_point(field_release:cttl.hsmm.HSMMParameterProto.str_file_distribution)
  return _impl_.str_file_distribution_.Release();
}
inline void HSMMParameterProto::set_allocated_str_file_distribution(std::string* str_file_distribution) {
  if (str_file_distribution != nullptr) {
    
  } else {
    
  }
  _impl_.str_file_distribution_.SetAllocated(str_file_distribution, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.str_file_distribution_.IsDefault()) {
    _impl_.str_file_distribution_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:cttl.hsmm.HSMMParameterProto.str_file_distribution)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace hsmm
}  // namespace cttl

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hsmm_5fparameter_2eproto
